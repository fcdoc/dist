<!doctypehtml><meta charset=UTF-8><link rel="alternate" type="application/rss+xml" hreflang="en" href="/en.rss"><link rel=stylesheet href=//registry.npmmirror.com/18x/latest/files/_.css><script src=//registry.npmmirror.com/18x/latest/files/seo.js></script><link rel=alternate href="https://doc.flashduty.com/flashduty/advanced/customize_incident_attrs" hreflang=x-default><link rel=canonical href="https://doc.flashduty.com/flashduty/advanced/customize_incident_attrs"><link rel=stylesheet href=//registry.npmmirror.com/18x/latest/files/seo.css><link rel=alternate hreflang=en href="https://doc.flashduty.com/en/flashduty/advanced/customize_incident_attrs.htm"><link rel=alternate hreflang=zh href="https://doc.flashduty.com/zh/flashduty/advanced/customize_incident_attrs.htm"><title>Customize Incident Title and Severity</title><main><article><hr /><h2>brief: By modifying the push parameters, you can customize information such as the severity and title of the incident</h2><h1>Customize Incident Title and Severity</h1><p>Customize the severity, title, and other information of the incident by modifying the push parameters.</p><h2>Customize Severity</h2><p><strong>Add Query parameter severity to the push address to cover the severity of incident .</strong></p><blockquote><p>[!NOTE]
Adapt to all integrations that report alerts through webhooks.</p></blockquote><p>Some alert integrations (such as AWS CloudWatch) do not support severity differentiation. In such cases, you can specify the severity in the integration push address. Different alert policies can be configured with different push addresses to differentiate the severity of the alerts.</p><p>Example: The following address specifies the severity parameter, with the value Info ( <strong>note the first letter is capitalized</strong> ). alert pushed through this address will always have the severity overridden to Info .</p><pre><code>https://api.flashcat.cloud/event/push/alert/aws/cloudwatch?integration_key=your-integration-key?severity=Info
</code></pre><h2>Customize Incident Title</h2><blockquote><p>[!NOTE]
Adapt to all integrations that report alerts through webhooks.</p></blockquote><p><strong>Add Query parameter title_rule to the push address to dynamically generate incident title.</strong></p><h3>Generated by Simplified Syntax</h3><p>Use :: to split substrings. Each substring can be a fixed string or a variable prefixed with $ . The variable content will be extracted from the tag. If it is not extracted, variable replacement will not be performed.</p><p>Example:</p><table><thead><tr><th>Rule</th><th>Tag Value</th><th>Generated Content</th></tr></thead><tbody><tr><td>$resource::$check</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;, &quot;check&quot;: &quot;cpu idle low&quot;}</td><td>127.0.0.1 / cpu idle low</td></tr><tr><td>$resource::$check</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;}</td><td>127.0.0.1 / $check</td></tr><tr><td>$resource:: The host is down</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;}</td><td>127.0.0.1 / Host down</td></tr></tbody></table><h3>Generated via ${Var} Reference Tags</h3><p>Use [ TPL ] as the prefix and ${} to reference the variable. The variable content will be extracted from the tag. If it cannot be extracted, use <no value> instead.</p><p>Example:</p><table><thead><tr><th>Rule</th><th>Tag Value</th><th>Generated Content</th></tr></thead><tbody><tr><td>[TPL]${resource} / ${check}</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;, &quot;check&quot;: &quot;cpu idle low&quot;}</td><td>127.0.0.1 / cpu idle low</td></tr><tr><td>[TPL]${resource} / ${check}</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;}</td><td>127.0.0.1 / &lt;no value&gt;</td></tr><tr><td>[ TPL ] ${resource} / is down</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;}</td><td>127.0.0.1 / Host down</td></tr></tbody></table><h3>Generated Through Golang Template Syntax</h3><p>Use [ TPL ] as the prefix, use {{}} to reference variables (you can reference labels and other variables), and use <no value> instead if not extracted. Variable scope reference <a href="/0">Alert event definition</a> .</p><p>Example:</p><table><thead><tr><th>Rule</th><th>Tag Value</th><th>Generated Content</th></tr></thead><tbody><tr><td>[TPL]{{.Labels.resource}} / {{.Labels.check}}</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;, &quot;check&quot;: &quot;cpu idle low&quot;}</td><td>127.0.0.1 / cpu idle low</td></tr><tr><td>[TPL]{{.Labels.resource}} / {{.Labels.check}}</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;}</td><td>127.0.0.1 / &lt;no value&gt;</td></tr><tr><td>[ TPL ] {{ . Labels.resource}} / Host is down</td><td>{&quot;resource&quot;: &quot;127.0.0.1&quot;}</td><td>127.0.0.1 / Host down</td></tr></tbody></table><h2>Frequently Asked Questions</h2><p>|+| What if the tags do not exist when using tags to dynamically generate titles?</p><pre><code>Depending on which variable acquisition method you use, the header may retain the original variable information or use &lt;no value&gt; instead.

Even if the variables cannot be obtained, it will not affect the generation of the alert. You can debug with confidence.
</code></pre></article><nav><a href="/">doc.flashduty.com</a><a href="/en/flashduty">FlashDuty: One-Stop Alert Response Platform</a></nav><footer><div id="Ft"><b><a class="site" href="//flashcat.cloud"></a><b>Â© FlashCat Cloud</b><b>Site Build By <a class="a" href="https://i18n.site">I18N.SITE</a></b></b><b><a href="//github.com/flashcatcloud">&#xe64c;</a></b></div></footer></main>